Aaron Shaw
CS404: Natural Language Processing
Question 3: Spell Checking

	At its core, spelling correction is divided into three steps: identifying the error, generating possible replacement candidates, and then ranking and selecting the correct candidate. A primitive spell-checker operates by:
	
1. Identifying a token not in its dictionary
2. Generating a list of all possible tokens within some set edit distance
3. Filtering out non-words from the list
4. Selecting a remaining candidate at random

This is a very rudimentary method of correcting spelling errors, but will work for the most part. Say we have the token 'acress', however. This simple spell-checker I described above would pick, at random, either 'actress', 'cress', 'caress', 'access', 'across', 'acres', or 'acres'. We can do better than that; a more advanced program will calculate the probability of each candidate and select the most likely one. For starters, let's assume that the spell-checker we are looking at is spell checking text typed on a traditional QWERTY keyboard. By nature of factors such as the physical layout of the keyboard itself or frequency of certain letter combinations in the language, certain specific errors will happen with greater frequency. So for each specific error, the spell-checker has access to Confusion Matrices, which are 26x26 arrays that contain probabilistic values for each individual operation. For example, when calculating the probability of 'actress' as a candidate for 'acress', the spell-checker would look up del[c,t]: the probability of 't' incorrectly being omitted after a 'c'. there are Confusion Matrices for deletion, insertion, substitution, and transposition. Confusion Matrices are generated by way of  corpuses, massive files of raw data. The spell-checker also determines how frequently the candidate word is mispelled and how frequently it shows up in the corpus. In summary:

P(Candidate) = (Confusion Table Value)/(Undamaged Character Count)*(Freq. of Candidate Word)

	This is the first step. However, these probabilities can be further refined. Context can be powerfully helpful in determining the proper candidate. Let's say we have the text, “a stellar and versatile acress whose combination of sass and glamour...”. In this example, the spell-checker can use a corpus to determine that 'actress' occurs after versatile with a far greater frequency than 'across' does. This is using the N-gram language model. By evaluating the spelling error in context, the spell-checker will have a more accurate estimate for a candidate. There is still more that can be done, however. A truly high-quality spell checker will evaluate sentences for replacement candidates even if no word is truly misspelled. The sentence “He scored a gaol in the last few minuets” does not contain spelling errors that would be detected without additional effort. One possible approach to detecting these errors is to generate replacement candidates for each word, with the unaltered word as a candidate as well. Then, once these have been generated, pick the most likely sequence. It quickly becomes evident, however, that this is exhaustively expensive and largely unnecessary. Instead, most spell-checkers operate under the assumption that any given sentence will only have one error per sentence. This covers spell-checking for the most part, but there's one last thing that truly advanced spell-checkers do; a state-of-the-art spell-checker will auto correct. If a candidate meets a certain confidence threshold, the spell-checker will correct the word autonomously.
